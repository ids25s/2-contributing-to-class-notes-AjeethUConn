---
title: "Homework Assignment 2"
author: "Ajeeth Vellore"
toc: true
number-sections: true
highlight-style: pygments
format: 
  html: 
    code-fold: false
    html-math-method: katex
  pdf: 
    geometry: 
      - top=30mm
      - left=20mm

##  docx: Never, unless to accommodate a collaborator
---

# Working on Homework Problems

a. **What are the differences betweeen binary and source files?**

   Source files are the code used to generate binary. As such, they can be 
   compiled directly into binary files like PDF, PNG, or EXE. Source files have 
   human -readable code that can be interepreted and edited simply, while binary
   is difficult (truthfully, practically impossible) for a human to read as 
   code.

a. **Why do we not want to track binary files in a repo?**

   Since it is difficult for a human to read binary and understand where changes
   have been made in that sort of machine-readable code, it is functionally
   useless to track the history of such files in a repo. Plus, a binary change
   could be the result of any sort of small difference that results from the
   code-compiling process, be it the tools used to compile, the machine and
   operating system used during compilation, et cetera.
   
a. **Why do I require pdf output via release?**

   This method of submission allows for graders to easily leave comments on the
   finalized version of the output from the code. This can be extrapolated to
   the way in which GitHub might be used in a professional development setting,
   where a potential user or customer can easily find finished products that
   they themselves can use and run and gauge their satisfaction with the work.

a. **Why do I not want your files added via ‘upload’?**

   The main reason is that we need to learn how to use GitHub's command line 
   tools. They are cleaner and faster than using manual upload, and will give
   us students the experience of working like real software developers.

a. **Why do I require line width under 80?**

   Keeping the line width under 80 allows for increased readability. Since it is
   an arbitrary standard, there no detriment to your code if you choose to go
   over that limit. However, the limited character length allows for lines of
   code to fit on all screens regardless of size and makes it easier for
   developers to read each other's code.

a. **Why is it not a good idea to have spaces in file/folder names?**

   It can be quite messy to work with files in the command line if they have
   spaces. While you can still call files that have spaces in them by placing a
   backslash (<span style="border: 1px solid #ccc; background-color: #f9f9f9;
   padding: 2px 6px; border-radius: 4px; font-family: monospace;">\\</span>) in
   the command line, it can add work and be an unnecessary source of difficulty
   that may cause issues while working with a given file or folder, since the 
   space character is meant to separate commands.

# Contributing to Class Notes

## Forking and cloning the class notes

First, we'll fork the Class Notes repository. What this does is effectively make
a copy of the original repository that we can make changes to as we please. We
can edit, render, and push edits whenever we need to without having to worry
about potentially conflicting changes with the original code. We will do this
using the following terminal code:



## Setting up local editing

## Editing class notes

## Pushing updates to class notes